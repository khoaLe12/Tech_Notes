When Docker pulls an image, it stores the image in its default storage directory, which us typically /var/lib/dokcer (though this can be changed in Docker's configuration).

To change the Docker's default storage location to other directory, we can modify the Docker daemon configuration file, which is /etc/docker/daemon.json.

In Linux, use VIM to write and save changes on daemon.json file: 
Add or modify data-root option to point to the specified directory:
 {
  "data-root": "/mnt/mydisk/docker"
}





================================================================================================================================================================================================================================================================================================================================================

The RUN instruction in a Dockerfile has two forms:

RUN <command> (shell form)
RUN ["executable", "param1", "param2"] (exec form)
In your case, RUN ["/log-event.sh", "image created"] is using the exec form, and RUN /log-event.sh image created is using the shell form.

Here are the differences between the two forms:

Shell form: The command is run in a shell, which by default is /bin/sh -c on Linux or cmd /S /C on Windows. This allows you to use shell processing capabilities, such as using pipes, redirects, or running multiple commands with &&. For example, RUN echo 'we are running some # of cool things' > /usr/local/etc/cool/stuff.txt.

Exec form: This form is recommended when you want to avoid shell processing. The exec form makes it possible to avoid shell string munging, and to RUN commands using a base image that does not contain the specified shell executable. It takes a JSON array with the first element being the executable and the rest being the arguments.

In your Dockerfile, RUN ["/log-event.sh", "image created"] is using the exec form, which means it will execute the log-event.sh script with image created as an argument, without invoking a shell.

On the other hand, RUN /log-event.sh image created is using the shell form, which means it will run the command in a shell. This allows you to use shell features, but also means you need to be aware of shell processing of your command.


==================================================================================================================================================


There are many ways to execute the scripts (or commands) defined in the instructions (RUN, CMD, ENTRYPOINT).

1. Use Shebang (#!) placed at the top of the executebale script file (like .sh file) to define which interpreter will be used by OS within the container (defined by 'FROM' instruction) to interpret and exeute the commands.
- So at the Dockerfile instructions used with 'Exec form', we can define that scripts to be a executeable binary file.
- Ex: 
	+ At log-event.sh: #!/bin/sh placed at the top of file
	+ At Dockerfile: RUN ["/log-event.sh", "image created"]

2. Use executable of 'Exec form' instruction to define the interpreter directly.
- Ex: RUN ["/bin/sh", "-c", "/log-event.sh", "image created"]

3. Use 'Shell form' instruction to run shell commands of OS within the container to execute the executeable script file. 
- EX: RUN /log-event.sh image created



====================================================================================================================================================================================================================

			*** Dockerfile instructions ***

1. RUN: is executed when building the image, the command passed to run executes on top of the current in a new layer. Then the result is committed to the image.


2. CMD: used to specify a default command that executes when the container is starting (startup command).
- Each Dockerfile only have one CMD entry, if there are more than one, docker daemon only invoke the last CMD.
- If we provide arguments to the "docker run" command, the CMD specified in the Dockerfile is ignored.
- Ex: 
	+ At Dockerfile: CMD ["/log-event.sh", "image created"]
	+ Run the container (case 1): docker run <image_name> =>  the command specified at CMD run.
	+ Run the container (case 2): docker run <image_name> cat log-event.sh => the command specified at CMD DON'T run.


3. ENTRYPOINT: (behave as CMD but more flexibility) is used to specify the default command to run when the container starts.
- We can provide more extra arguments when running the container, but the default command will always run.
- Ex: 
	+ At Dockerfile: ENTRYPOINT ["/log-event.sh"]
	+ Run the container (case 1): docker run <my_image> => the command "log-event.sh" run
	+ Run the container (case 2): docker run <my_image> container running now => the command "log-event.sh container running now" run

