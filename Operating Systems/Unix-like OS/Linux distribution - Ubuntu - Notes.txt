+++ ls
= ls: show structure of all file/folder of current directory
= ls -l: As ls but see more detail (permission, owner, group, size, date)
= ls -a: As ls but show all hidden items


+++ cd
= cd '...': used to change the current working directory to a defined dirctory inside that working directory
= cd .. : go back to parent directoty
= cd ../.. : go back twice
= cd /home/... : go to the defined directory using specific path


+++ clear
= clear: clear the terminal or console window of commands and output generated by them


+++ mkdir
= mkdir new\ folder/: used to make new directory in the current working directory. If the directory already exist, it will throw error
= mkdir -p parent/children1/children2/: -p options tell the comnmand to create parent directoties as needed. If some directories do exist, it will not throw error


+++ touch
= touch test.html: used to create new file in the current directory (can not add content for the file)
= touch folder/test.html: create new file in 'folder' directory in the current directory, throw error if the folder does not exist


+++ vi
= vi test.html: used to open VIM (text editor) that target to the defined file (here is test.html) in the current dirctoty. 
Inside VIM:
+ Press I to switch to insert mode,
+ Press Esc to exit insert mode
+ Rnter :q to exit VIM, 
+ Enter :x to write changes to the file and exit
+ Enter :w to write changes to the file
+ Enter :wq to write changes to the file and exit


(the command that can display the stout - that can be used to create file)
+++ cat is used to display the standard output (stout)
= cat test.html: used to display the contents of the file named 'test.html' in the current directory to the terminal or command prompt. If the file does not exist or is not readable, the command will throw an error.
= cat test.html test1.html: display the contents of multiple files.
= cat test.html test1.html > concat.html: used to concatenate the contents of the specific files into a single file named 'concat.html'


+++ echo is used to display the (stout)
= echo "Hello echo": display content to teh stout
= echo "<h2>Hello Echo command</h2>" > echo.html: create new file named echo.html with the defined contents. If the file already existed, it will override the old contents to the new one.
= echo "append the content" >> echo.html: append new content to the end of the contents.


+++ tail
= tail content.html: get the last 10 lines (by default) of the contents of file.
= tail -n 5 content.html: get the last specific lines (here is 5)
= tail -f content.html: follow the content of the file, which means observe the change of the contents of the file (return new contents if the file's contents are updated). Press "Ctrl + C" to exit. 


+++ grep
= cat content.html | grep "finding content": display the contents of the file which is filtered by the provided string (means it will only display all lines that each line's content contains the string 'findind content').


+++ cp [arg1] [agr2]  ====  arg1: path to copied file, arg2: path to destination
= cp demo.html copy-demo.html: used to copy the file named 'demo.html' to new file named 'copy-demo.html' in the current directory.
= cp folder/demo.html folder/copy/copy.html: copy "demo.html" to new file "copy.html" and put it in destination folder (here is 'copy' folder)
= cp folder/demo.html folder/copy/: copy "demo.html" to new file "demo.html" (name not changed) and put it in destination folder.


+++ mv
= mv demo.html demo2.html: used to rename the file 'demo.html' to 'demo2.html' (it just move the file a to the current directory and rename it).
= mv demo.html folder/: move file to destination folder.
= mv demo.html folder/demo2.html: move file to destination folder and rename it.
= mv folder/ folder2/: move folder into folder2
= mv folder/ folder2/move-folder: move folder into folder2 and rename it.


+++ rm
= rm demo.html: remove the file in the current directory.
= rm demo1.html demo2.html: remove multiple files.
= rmdir folder/: remove the empty directory (throw error if not empty)
= rm -r folder/: remove folder and all of its children (could be file and directory)


+++ sudo used to perform tasks that require administrative or root permission (root account is created after install linux)
... the directory /home/ is for root user, so if other user is used to perform task inside that folder, that action will be denied
= sudo touch /home/index.js: create file named 'index.html' in the 'home' directory with the root permission.


**** All files and folder have some informations about: permissions, ownmer, group, size, date, siblings.
++++ There are 3 permission (Read, Write, Execute)
++++ There are 3 general classes of users (User, Group, Other)

+++ chmod used to change the permission of the file or directory
= sudo chmod u=rwx,g=rwx,o=rwx index.html: update the permission of the file
= sudo chmod u-r,g-w,o-x index.html
= sudo chmod a=rwx index.html: update permission to all classes of user.
= sudo chmod 777 index.html: equivalent to a=rwx.
** Permission is represented in octal number (base 8):
* 4 for read
* 2 for write
* 1 for execute
* 0 for nothing
* 7 for read, write, execute
* 6 for read, write
* 5 for read, execute
* 3 for write, execute


+++ chown used to change the owner of files
chown root index.html: change the owner of file index.html to root user.
chown root:root index.html: change the owner to root and group to root.


+++ man used to get help (information) of a syntax command, it will show instructions of that command.
= man sudo: used to get information about sudo


+++ wget is used to download the resource (files) from the Web. It is the non-interactive network downloader.
= wget [link to resource]: download files get from the web by link to the current directory


+++ apt is a command-line interface. It provides a high-level commandline interface for the package management
= sudo apt update: download pacakage information from all configured sources
= sudo apt upgrade: install availale upgrades of all packages currently installed on the system from the sources configured via sources.list(5).


+++ kill is used to stop the progress of task
++ There are 64 signals when killing a progreess
++ SIGTERM(15) - requests a program to stop running and gives it some times to save all of its progress (used by default).
++ SIGKILL(9) - forces programs to stop immediately. Unsaved progress will be lost.
= ps aux: view all running progress.
= kill <progressId>: kill a progress with specific id
= kill -9 <progressId>: kill a progress with signal 9


+++ ping is used to check the network connectivity between a host (your computer) and a server or another host.
*** ping <destination>: this command will send ICMP (Internet Control Message Protocol) packets to the specified destination, and then wait for a response. This ping command will continue to send ICMP packets until it receives a response or until it is stopped manually.
= ping google.com


+++ uname - unix name: print system information


+++ passwd: change password of login user 


+++ top: display linux processes - provides a dynamic real-time view of a running system.
++ It can display system summary information as well as a list of processes or threads currently being managed by the Linux kernel.


+++ df: report file system disk space usage
++ df displays the amount of disk space available on the file system containing each file name argument. If no file name is given, the space avilable on all currently mounted file system is shown.
= df -h: make it more easiser to read (h is for human)


+++ free: display amount of free and used memeory in the system
++ free display the total amount of free and used physical and swap memory in the system, as well as the buffers and caches used by the kernel.
= free -h: make it more easiser to read (h is for human)

====================================================================================

file sh is a file shell script like 'run.sh' which can be run when click or call to it. To run .sh file, type command start with path then file name like './run.sh'



===================================================================================
		Commands for working with User and Group

= groups: view all groups of login account.

= groups <user_name>: view all groups of specific account.

= id: view all groups of login account (with id of group).

= id <user_name>: view all groups of specific account (with id of group).

= cat /etc/group: View all group that exist in the system.

= sudo usermod -aG <group_name> <user_name>: Add specific account to a specific group.

= sudo gpasswd -d <user_name> <group_name>: Remove a user from a group.






